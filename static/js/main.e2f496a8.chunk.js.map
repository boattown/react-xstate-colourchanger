{"version":3,"sources":["dmAppointmentPlus.ts","index.tsx"],"names":["send","actions","cancel","say","text","_context","type","value","grammar","person","day","time","boolgrammar","yes","no","dmMachine","initial","states","init","on","CLICK","createAppointment","RECOGNISED","target","cond","context","recResult","MAXSPEECH","counter","hist","who","assign","prompt","entry","ENDSPEECH","ask","delay","id","nomatch","allday","schedule_meeting_allday","schedule_meeting","end","maxspeech1","maxspeech2","maxspeech3","help","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","count","progress","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listen","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","nluRequest","fetch","Request","proxyurl","method","headers","then","data","json","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.e2f496a8.chunk.js","sourcesContent":["import { MachineConfig, Action, assign, actions } from \"xstate\";\nconst { send, cancel } = actions;\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, positive?: string, negative?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Regina\": { person: \"Regina Phalange\" },\n    \"Rachel\": { person: \"Rachel Green\" },\n    \"Beyonce\": { person: \"Beyonce Knowles\" },\n    \"Drake\": { person: \"Doctor Drake Ramoray\" },\n    \"Monday\": { day: \"Monday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Sunday\": { day: \"Sunday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"8\": { time: \"8:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"1\": { time: \"13:00\" },\n    \"at 1\": { time: \"13:00\" },\n    \"2\": { time: \"14:00\" },\n    \"at 2\": { time: \"14:00\" },\n    \"3\": { time: \"15:00\" },\n    \"at 3\": { time: \"15:00\" },\n    \"4\": { time: \"16:00\" },\n    \"at 4\": { time: \"16:00\" },\n    \"5\": { time: \"17:00\" },\n    \"at 5\": { time: \"17:00\" },\n    \"6\": { time: \"18:00\" },\n    \"at 6\": { time: \"18:00\" },\n}\n\nconst boolgrammar: { [index: string]: { yes?: boolean, no?: boolean } } = {\n    \"yes\": { yes: true },\n    \"of course\": { yes: true },\n    \"sure\": { yes: true },\n    \"yeah\": { yes: true },\n    \"no\": { no: false },\n    \"no way\": { no: false },\n    \"nope\": { no: false }\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [send('LISTEN'), send('MAXSPEECH', { delay: 4000, id: 'maxsp' })]\n            },\n        }\n    })\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'createAppointment'\n            }\n        },\n        createAppointment: {\n            initial: 'who',\n            on: {\n                RECOGNISED: {\n                    target: 'help',\n                    cond: (context) => context.recResult === 'help'\n                },\n                MAXSPEECH: [{ target: 'maxspeech2', cond: (context) => context.counter === 1 },\n                {\n                    target: 'maxspeech3', cond: (context) => context.counter === 2\n                },\n                { target: \"maxspeech1\" }]\n            },\n            states: {\n                hist: { type: 'history' },\n                who: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{ target: '#root.dm.help', cond: (context) => context.recResult === 'help' },\n                        {\n                            cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                            actions: [assign((context) => { return { person: grammar[context.recResult].person } }), cancel('maxsp')],\n                            target: \"day\"\n\n                        },\n                        { target: \".nomatch\" }],\n                    },\n                    states: {\n                        prompt: {\n                            ...promptAndAsk(\"Let's create an appointment! Who are you meeting with?\")\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I don't know them.\"),\n                            on: { ENDSPEECH: [{ target: \"prompt\", actions: cancel('maxsp') }] }\n                        }\n                    }\n                },\n                day: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{ target: '#root.dm.help', cond: (context) => context.recResult === 'help' }, {\n                            cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                            actions: [assign((context) => { return { day: grammar[context.recResult].day } }), cancel('maxsp')],\n                            target: \"allday\"\n\n                        },\n                        { target: \".nomatch\" }],\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `OK. ${context.person}. On which day is your meeting?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n                        },\n                        ask: {\n                            entry: [send('LISTEN'), send('MAXSPEECH', { delay: 4000, id: 'maxsp' })]\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I didn't catch that. On which day is your meeting?\"),\n                            on: { ENDSPEECH: [{ target: \"ask\", actions: cancel('maxsp') }] }\n                        }\n\n                    }\n                },\n                allday: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{ target: '#root.dm.help', cond: (context) => context.recResult === 'help' }, {\n                            cond: (context) => \"yes\" in (boolgrammar[context.recResult] || {}),\n                            actions: cancel('maxsp'),\n                            target: \"schedule_meeting_allday\"\n\n                        },\n                        {\n                            cond: (context) => \"no\" in (boolgrammar[context.recResult] || {}),\n                            actions: cancel('maxsp'),\n                            target: \"time\"\n\n                        },\n                        { target: \".nomatch\" }],\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `OK. ${context.day}. Will it take all day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n                        },\n                        ask: {\n                            entry: [send('LISTEN'), send('MAXSPEECH', { delay: 4000, id: 'maxsp' })]\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I didn't catch that. Will it take all day?\"),\n                            on: { ENDSPEECH: [{ target: \"ask\", actions: cancel('maxsp') }] }\n                        }\n\n                    }\n                },\n                time: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{ target: '#root.dm.help', cond: (context) => context.recResult === 'help' }, {\n                            cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                            actions: [assign((context) => { return { time: grammar[context.recResult].time } }), cancel('maxsp')],\n                            target: \"schedule_meeting\"\n\n                        },\n                        { target: \".nomatch\" }],\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `OK. What time is your meeting?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n                        },\n                        ask: {\n                            entry: [send('LISTEN'), send('MAXSPEECH', { delay: 4000, id: 'maxsp' })]\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I didn't catch that. What time is your meeting?\"),\n                            on: { ENDSPEECH: [{ target: \"ask\", actions: cancel('maxsp') }] }\n                        }\n\n                    }\n                },\n                schedule_meeting_allday: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{ target: '#root.dm.help', cond: (context) => context.recResult === 'help' }, {\n                            cond: (context) => \"yes\" in (boolgrammar[context.recResult] || {}),\n                            actions: cancel('maxsp'),\n                            target: \"end\"\n\n                        },\n                        {\n                            cond: (context) => \"no\" in (boolgrammar[context.recResult] || {}),\n                            actions: cancel('maxsp'),\n                            target: \"who\"\n\n                        },\n                        { target: \".nomatch\" }],\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Do you want me to create an appointment with ${context.person} on ${context.day}?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n                        },\n                        ask: {\n                            entry: [send('LISTEN'), send('MAXSPEECH', { delay: 4000, id: 'maxsp' })]\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I didn't catch that\"),\n                            on: { ENDSPEECH: [{ target: \"ask\", actions: cancel('maxsp') }] }\n                        }\n\n                    }\n                },\n                schedule_meeting: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{ target: '#root.dm.help', cond: (context) => context.recResult === 'help' }, {\n                            cond: (context) => \"yes\" in (boolgrammar[context.recResult] || {}),\n                            actions: cancel('maxsp'),\n                            target: \"end\"\n\n                        },\n                        {\n                            cond: (context) => \"no\" in (boolgrammar[context.recResult] || {}),\n                            actions: cancel('maxsp'),\n                            target: \"who\"\n\n                        },\n                        { target: \".nomatch\" }],\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n                        },\n                        ask: {\n                            entry: [send('LISTEN'), send('MAXSPEECH', { delay: 4000, id: 'maxsp' })]\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I didn't catch that\"),\n                            on: { ENDSPEECH: [{ target: \"ask\", actions: cancel('maxsp') }] }\n                        }\n\n                    }\n                }, end: {\n                    initial: \"prompt\",\n                    states: {\n                        prompt: {\n                            entry: say(\"Your appointment has been created.\"),\n                            on: { ENDSPEECH: \"#root.dm\" }\n                        }\n                    }\n                }\n\n\n\n            }\n        },\n        maxspeech1: {\n            entry: say(\"I couldn't hear you.\"),\n            on: {\n                ENDSPEECH: [{ target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 1 },\n                { target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 2 },\n                { target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 3 }],\n            }\n        },\n        maxspeech2: {\n            entry: say(\"Are you there?\"),\n            on: {\n                ENDSPEECH: [{ target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 1 },\n                { target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 2 },\n                { target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 3 }],\n            }\n        },\n        maxspeech3: {\n            entry: say(\"You're not even listening, I give up.\"),\n            on: {\n                ENDSPEECH: [{ target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 1 },\n                { target: \"#root.dm.createAppointment.hist\", cond: (context) => context.counter === 2 },\n                { target: \"#root.dm\", cond: (context) => context.counter === 3 }],\n            }\n        },\n        help: {\n            initial: \"prompt\",\n            states: {\n                prompt: {\n                    entry: say(\"Help message.\"),\n                    on: { ENDSPEECH: \"#root.dm.createAppointment.hist\" }\n                }\n            }\n        }\n    }\n})","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointmentPlus\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\nlet count = 0\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        MAXSPEECH: {\n                            actions: assign((context) => {\n                                if (context.counter) {\n                                    return { counter: context.counter + 1 }\n                                } else {\n                                    return { counter: count + 1 }\n                                }\n                            }),\n                            target: 'idle'\n                        },\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n         * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://lab-ii.herokuapp.com/model/parse'\nexport const nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}