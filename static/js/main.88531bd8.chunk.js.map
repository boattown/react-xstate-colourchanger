{"version":3,"sources":["dmAppointment.ts","dmMenu.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","boolgrammar","yes","no","dmMachine","initial","states","init","on","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","assign","target","ask","nomatch","allday","schedule_meeting_allday","schedule_meeting","end","dmMenu","CLICK","welcome","invoking_rasa","invoke","id","src","event","nluRequest","onDone","data","intent","onError","appointment","timer","todoList","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","console","log","test","logIntent","nluData","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","fetch","Request","proxyurl","method","headers","then","json","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.88531bd8.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\nimport { dmMenu } from \"./dmMenu\";\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, positive?: string, negative?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Regina\": { person: \"Regina Phalange\" },\n    \"Rachel\": { person: \"Rachel Green\" },\n    \"Beyonce\": { person: \"Beyonce Knowles\" },\n    \"Drake\": { person: \"Doctor Drake Ramoray\" },\n    \"Monday\": { day: \"Monday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Sunday\": { day: \"Sunday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"8\": { time: \"8:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"1\": { time: \"13:00\" },\n    \"at 1\": { time: \"13:00\" },\n    \"2\": { time: \"14:00\" },\n    \"at 2\": { time: \"14:00\" },\n    \"3\": { time: \"15:00\" },\n    \"at 3\": { time: \"15:00\" },\n    \"4\": { time: \"16:00\" },\n    \"at 4\": { time: \"16:00\" },\n    \"5\": { time: \"17:00\" },\n    \"at 5\": { time: \"17:00\" },\n    \"6\": { time: \"18:00\" },\n    \"at 6\": { time: \"18:00\" },\n}\n\nconst boolgrammar: { [index: string]: { yes?: boolean, no?: boolean } } = {\n    \"yes\": { yes: true },\n    \"of course\": { yes: true },\n    \"sure\": { yes: true },\n    \"yeah\": { yes: true },\n    \"no\": { no: false },\n    \"no way\": { no: false },\n    \"nope\": { no: false }\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"OK. Let's create an appointment!\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"allday\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't catch that. On which day is your meeting?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n\n            }\n        },\n        allday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"yes\" in (boolgrammar[context.recResult] || {}),\n                    target: \"schedule_meeting_allday\"\n\n                },\n                {\n                    cond: (context) => \"no\" in (boolgrammar[context.recResult] || {}),\n                    target: \"time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. Will it take all day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't catch that. Will it take all day?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n\n            }\n        },\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"schedule_meeting\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. What time is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't catch that. What time is your meeting?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n\n            }\n        },\n        schedule_meeting_allday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"yes\" in (boolgrammar[context.recResult] || {}),\n                    target: \"end\"\n\n                },\n                {\n                    cond: (context) => \"no\" in (boolgrammar[context.recResult] || {}),\n                    target: \"who\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't catch that\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n\n            }\n        },\n        schedule_meeting: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"yes\" in (boolgrammar[context.recResult] || {}),\n                    target: \"end\"\n\n                },\n                {\n                    cond: (context) => \"no\" in (boolgrammar[context.recResult] || {}),\n                    target: \"who\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't catch that\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n\n            }\n        },\n        end: {\n            initial: \"prompt\",\n            states: {\n                prompt: {\n                    entry: say(\"Your appointment has been created. If you need help with something else, please click on the screen.\"),\n                    on: { ENDSPEECH: \"#root.dm\" }\n                }\n            }\n        }\n    }\n})\n","import { MachineConfig, send, Action } from \"xstate\";\nimport { nluRequest } from \"./index\"\nimport { dmMachine } from \"./dmAppointment\";\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nexport const dmMenu: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: {\n                    target: \"invoking_rasa\",\n                }\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Welcome! I can help you schedule a meeting, set an alarm and add to your to do list. What would you like to do?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                }\n            }\n        },\n        invoking_rasa: {\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.recResult),\n                onDone: [\n                    { target: \"appointment\", cond: (context, event) => event.data.intent[\"name\"] === \"appointments\" },\n                    { target: \"timer\", cond: (context, event) => event.data.intent[\"name\"] === \"timer\" },\n                    { target: \"todoList\", cond: (context, event) => event.data.intent[\"name\"] === \"todo_item\" }],\n                onError: {\n                    target: 'welcome',\n                }\n            }\n\n\n        },\n        appointment: {\n            ...dmMachine\n        },\n        timer: {\n            initial: \"prompt\",\n            states: {\n                prompt: {\n                    entry: say(\"OK. I will help you set a timer.\"),\n                    on: { ENDSPEECH: \"#root.dm\" }\n                }\n            }\n        },\n        todoList: {\n            initial: \"prompt\",\n            states: {\n                prompt: {\n                    entry: say(\"OK. Let's add to your to do list!\"),\n                    on: {\n                        ENDSPEECH: \"#root.dm\"\n                    }\n                },\n            }\n        }\n    }\n})","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMenu } from \"./dmMenu\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMenu\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n         * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://lab-ii.herokuapp.com/model/parse'\nexport const nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}